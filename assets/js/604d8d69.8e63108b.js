"use strict";(self.webpackChunk_pdfme_website=self.webpackChunk_pdfme_website||[]).push([[325],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var f=r.createContext({}),u=function(t){var e=r.useContext(f),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=u(t.components);return r.createElement(f.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,f=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),p=u(n),d=a,m=p["".concat(f,".").concat(d)]||p[d]||c[d]||o;return n?r.createElement(m,i(i({ref:e},l),{},{components:n})):r.createElement(m,i({ref:e},l))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var f in e)hasOwnProperty.call(e,f)&&(s[f]=e[f]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3959:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return f},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},f="Custom Font",u={unversionedId:"guides/custom-font",id:"guides/custom-font",title:"Custom Font",description:"pdfme uses the helvetica font by default, but you can use any font you like.",source:"@site/docs/guides/custom-font.md",sourceDirName:"guides",slug:"/guides/custom-font",permalink:"/docs/guides/custom-font",editUrl:"https://github.com/pdfme/pdfme/tree/main/website/docs/guides/custom-font.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Exports",permalink:"/docs/api/common/"}},l={},c=[{value:"About Font type",id:"about-font-type",level:2},{value:"How to set font",id:"how-to-set-font",level:2},{value:"Generator",id:"generator",level:3},{value:"UI",id:"ui",level:3},{value:"Setting font at instance initialization",id:"setting-font-at-instance-initialization",level:4},{value:"Update fonts with <code>updateOptions</code>.",id:"update-fonts-with-updateoptions",level:4}],p={toc:c};function d(t){var e=t.components,n=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"custom-font"},"Custom Font"),(0,o.kt)("p",null,"pdfme uses the helvetica font by default, but you can use any font you like."),(0,o.kt)("h2",{id:"about-font-type"},"About Font type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type Font = {\n  [fontName: string]: {\n    data: Uint8Array | ArrayBuffer;\n    fallback?: boolean;\n    subset?: boolean;\n  };\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"*",(0,o.kt)("inlineCode",{parentName:"li"},"fallback"),": Setting it to true makes it the font to use if not set to a ",(0,o.kt)("inlineCode",{parentName:"li"},"fontName"),". Only one of the font objects must be set to true."),(0,o.kt)("li",{parentName:"ul"},"*",(0,o.kt)("inlineCode",{parentName:"li"},"subset"),": The default is true, but it can be set to false to set the font embedding to not subset. (This setting is for a bug in fontkit when embedding certain fonts with subsetting.)")),(0,o.kt)("p",null,"Please read font data by fetch or fs.readFileSync as below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const font: Font = {\n  serif: {\n    data: await fetch('fonts/serif.ttf').then((res) => res.arrayBuffer()),\n    fallback: true,\n  },\n  sans_serif: {\n    data: fs.readFileSync(\"fonts/sans_serif.ttf\"),\n  },\n};\n")),(0,o.kt)("h2",{id:"how-to-set-font"},"How to set font"),(0,o.kt)("p",null,"Let's check out how to set font in the generator and ui packages."),(0,o.kt)("h3",{id:"generator"},"Generator"),(0,o.kt)("p",null,"Set font as option in ",(0,o.kt)("a",{parentName:"p",href:"/docs/getting-started#generator"},"generate")," function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Template, BLANK_PDF, generate } from '@pdfme/generator';\n\nconst font = {\n  serif: {\n    data: await fetch('fonts/serif.ttf').then((res) => res.arrayBuffer()),\n    fallback: true,\n  },\n  sans_serif: {\n    data: fs.readFileSync(\"fonts/sans_serif.ttf\"),\n  },\n}\nconst template: Template = {\n  basePdf: BLANK_PDF,\n  schemas: [\n    {\n      a: {\n        type: 'text',\n        fontName: 'serif',\n        position: { x: 0, y: 0 },\n        width: 10, height: 10,\n      },\n      b: {\n        type: 'sans_serif',\n        fontName: 'serif',\n        position: { x: 10, y: 10 },\n        width: 10, height: 10,\n      },\n      c: { // <- use fallback font. (serif)\n        type: 'text',\n        position: { x: 20, y: 20 },\n        width: 10, height: 10,\n      },\n    },\n  ],\n};\nconst inputs = [{ a: 'a1', b: 'b1', c: 'c1' }];\n\n\ngenerate({ template, inputs, options: { font } }).then((pdf) => {\n  console.log(pdf);\n\n  // Browser\n  // const blob = new Blob([pdf.buffer], { type: 'application/pdf' });\n  // window.open(URL.createObjectURL(blob));\n\n  // Node.js\n  // fs.writeFileSync(path.join(__dirname, `test.pdf`), pdf);\n});\n")),(0,o.kt)("h3",{id:"ui"},"UI"),(0,o.kt)("p",null,"There are two ways to set fonts in the UI. instance initialization and through method.",(0,o.kt)("br",{parentName:"p"}),"\n","The sample code is for ",(0,o.kt)("a",{parentName:"p",href:"/docs/getting-started#designer"},"Designer"),", but the same way can be used for ",(0,o.kt)("a",{parentName:"p",href:"/docs/getting-started#form"},"Form")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/getting-started#viewer"},"Viewer"),"."),(0,o.kt)("h4",{id:"setting-font-at-instance-initialization"},"Setting font at instance initialization"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Designer } from \"@pdfme/ui\";\n\nconst domContainer = document.getElementById('container');\nconst template = {\n  // skip...\n}\nconst font = {\n  serif: {\n    data: await fetch('fonts/serif.ttf').then((res) => res.arrayBuffer()),\n    fallback: true,\n  },\n  sans_serif: {\n    data: await fetch('fonts/sans_serif.ttf').then((res) => res.arrayBuffer()),\n  },\n}\n\nconst designer = new Designer({ domContainer, template, options: { font } });\n")),(0,o.kt)("h4",{id:"update-fonts-with-updateoptions"},"Update fonts with ",(0,o.kt)("inlineCode",{parentName:"h4"},"updateOptions"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const font = {\n  serif: {\n    data: await fetch('fonts/serif.ttf').then((res) => res.arrayBuffer()),\n  },\n  sans_serif: {\n    data: await fetch('fonts/sans_serif.ttf').then((res) => res.arrayBuffer()),\n    fallback: true,\n  },\n}\ndesigner.updateOptions({ font });\n")))}d.isMDXComponent=!0}}]);